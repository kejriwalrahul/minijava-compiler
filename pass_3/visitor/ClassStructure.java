//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

public class ClassStructure extends DepthFirstVisitor{
   //
   // User-generated visitor methods below
   //

	HashMap<String, String> classpar = new HashMap<String, String>();
	HashMap<String, HashSet<String>> class_children = new HashMap<String, HashSet<String>>();
	public HashMap<String, class_struct> structure = new HashMap<String, class_struct>();
	
	String curr_class = "";
	String global_type = "";
	boolean field_add = false;
	
	public ArrayList<String> top_sort(){
		ArrayList<String> sorted  = new ArrayList<String>();
		while(sorted.size() != class_children.size()-1){
			// System.out.println(classpar);
			// System.out.println(class_children);
			Iterator<String> i = class_children.get("null").iterator();
			String curr = i.next();
			class_children.get("null").remove(curr);
			classpar.remove(curr);
			sorted.add(curr);
			for(String s : class_children.get(curr)){
				classpar.remove(s);
				class_children.get("null").add(s);
			}
		}		
		return sorted;
	}
	
	public void build_final_structure(){
		//	Copy the original parent dependency	
		HashMap<String, String> parent = new HashMap<String, String>();
		parent.putAll(classpar);
		
		//	Get topological sort on classes
		ArrayList<String> class_dag = top_sort();
		// System.out.println(class_dag);
		
		//	Iterate over classes in top. order
		for(String s: class_dag){
			//	Get parent of class
			String curr_par = parent.get(s);
			//	Build final structure for class s
			class_struct cs = new class_struct();
			
			// If class has parent, place inherited fields and methods into this class
			if(curr_par != "null"){
				cs = structure.get(curr_par).copy();
			}

			// Get fields and methods of current class
			class_struct old_struct = structure.get(s);
			
			// Add all fields of curr class to its final structure
			for(String f: old_struct.ordered_fields){
				cs.add_field(f, old_struct.ftype.get(f));
			}
			// Iterate over methods of curr class
			for(String m: old_struct.ordered_methods){
				// If curr method exists in some parent
				if(cs.methods.containsKey(m)){
					// Override it					
					cs.method_class.put(m, s);
				}
				else{
					// Else add method to final structure
					cs.add_method(m, s);
				}
			}
			// Replace the old structure with finalized one
			structure.put(s, cs);
			// structure.get(s).display();
		}
		
		// System.out.println("Done");
	}
	
   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public void visit(Goal n) {
	  class_children.put("null", new HashSet<String>());
	  n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      
      build_final_structure();
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public void visit(ClassDeclaration n) {
      structure.put(n.f1.f0.tokenImage, new class_struct());
      classpar.put(n.f1.f0.tokenImage, "null");
      if(!class_children.containsKey(n.f1.f0.tokenImage))
    	  class_children.put(n.f1.f0.tokenImage, new HashSet<String>());
      class_children.get("null").add(n.f1.f0.tokenImage);
      
      curr_class = n.f1.f0.tokenImage;
			  
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      
      field_add = true;
      n.f3.accept(this);
      field_add = false;
      
      n.f4.accept(this);
      n.f5.accept(this);
      
      curr_class = "";
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public void visit(ClassExtendsDeclaration n) {
      structure.put(n.f1.f0.tokenImage, new class_struct());
	  classpar.put(n.f1.f0.tokenImage, n.f3.f0.tokenImage);
	  if(!class_children.containsKey(n.f1.f0.tokenImage))
    	  class_children.put(n.f1.f0.tokenImage, new HashSet<String>());
	  if(!class_children.containsKey(n.f3.f0.tokenImage))
    	  class_children.put(n.f3.f0.tokenImage, new HashSet<String>());

	  class_children.get(n.f3.f0.tokenImage).add(n.f1.f0.tokenImage);
	  
	  curr_class = n.f1.f0.tokenImage;
		  
	  n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      
      field_add = true;
      n.f5.accept(this);
      field_add = false;
      
      n.f6.accept(this);
      n.f7.accept(this);
   
      curr_class = "";
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public void visit(VarDeclaration n) {
	  n.f0.accept(this); 
	  if(field_add){
		  structure.get(curr_class).add_field(curr_class + "_" + n.f1.f0.tokenImage, global_type);
	  }
	  
      n.f1.accept(this);
      n.f2.accept(this);
   }
   
   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public void visit(Type n) {
       global_type = "";
	   n.f0.accept(this);  
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public void visit(ArrayType n) {
      global_type = "int[]";
   }
   
   /**
    * f0 -> "boolean"
    */
   public void visit(BooleanType n) {
	  global_type = "boolean";
   }
   
   /**
    * f0 -> "int"
    */
   public void visit(IntegerType n) {
	  global_type = "int";
   }
   
   /**
    * f0 -> <IDENTIFIER>
    */
   public void visit(Identifier n) {
      global_type = n.f0.tokenImage;
   }
   
   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public void visit(MethodDeclaration n) {
	  structure.get(curr_class).add_method(n.f2.f0.tokenImage, curr_class);
	   
	  n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      n.f12.accept(this);
   }
}
