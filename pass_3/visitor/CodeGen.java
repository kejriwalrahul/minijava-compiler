//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

class Obj{
	String type;
	int    index;
	String origin;
}

public class CodeGen extends GJNoArguDepthFirst<String> {
   public HashMap<String, class_struct> structure = new HashMap<String, class_struct>();
   HashMap<String, Obj>	 class_scope = new HashMap<String, Obj>();
   HashMap<String, Obj>	 local_scope = new HashMap<String, Obj>();
   // HashMap<String, Integer> map_fns  = new HashMap<String, Integer>();
   String curr_class = "";
   
   int temp_top  = 20;
   
   int label_top = 0;
   int param_count = 0;
   String curr_type = "";
   boolean insidefn   = false;
   boolean typelookup = false;
   boolean heaped = false;
   
   String class_var_lvalue;
   
   public String getNewTemp(){
	   temp_top++;
	   
/*	   class_struct c;
	   if(temp_top-1 == 23)
		   c.add_field("");*/
	   
	   return Integer.toString(temp_top-1);
   }
   
   public String getNewLabel(){
	   label_top++;
	   return "L" + Integer.toString(label_top-1);
   }
   
   public void error(){
	   System.out.println("Sanity Check Error");
	   /*class_struct c;
	   if(temp_top-1 == 23)
		   c.add_field("");
	   */System.exit(0);
   }
   
   public Obj get_var(String id){
	   	if(local_scope.containsKey(id))
	   		return local_scope.get(id);
	   	if(class_scope.containsKey(id))
	   		return class_scope.get(id);
	   	error();
	   	return new Obj(); //To satisfy compiler
   }
   
   public void add_class_var(String id, String type, String cname){
	   Obj o = new Obj();
	   o.type = type;
	   o.index = structure.get(cname).fields.get(cname+"_"+id);
	   o.origin = "class";
	   class_scope.put(id, o);
   }
   
   public void add_extend_vars(){
	   for(String s: structure.get(curr_class).ordered_fields){
		   if(!class_scope.containsKey(s.substring(s.indexOf('_')+1))){
			   add_class_var(s.substring(s.indexOf('_')+1), structure.get(curr_class).ftype.get(s), s.substring(0, s.indexOf('_')));
		   }
	   }
   }
   
   public String add_local_var(String id, String type){
	   String ind = getNewTemp();
	   Obj o =  new Obj();
	   o.type = type;
	   o.index = Integer.parseInt(ind);
	   o.origin = "method";
	   local_scope.put(id, o);
	   
	   return ind;
   }
   
   public void add_local_var(String id, String type, int i){
	   Obj o =  new Obj();
	   o.type = type;
	   o.index = i;
	   o.origin = "method";
	   local_scope.put(id, o);
   }
   
   public void flush_class(){
	   class_scope.clear();
   }
   
   public void flush_local(){
	   local_scope.clear();
   }
   
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public String visit(NodeList n) {
      String _ret="";
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         _ret += e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public String visit(NodeListOptional n) {
      if ( n.present() ) {
         String _ret="";
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            _ret += e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return "";
   }

   public String visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return "";
   }

   public String visit(NodeSequence n) {
      String _ret="";
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         _ret += e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public String visit(NodeToken n) { return ""; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public String visit(Goal n) {
      String _ret="";
      _ret += n.f0.accept(this);
      _ret += n.f1.accept(this);
      n.f2.accept(this);
      
      System.out.println(_ret);
      
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public String visit(MainClass n) {
      String _ret="MAIN ";
      _ret += n.f14.accept(this);
      _ret += "END ";

      return _ret + "\n";
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public String visit(TypeDeclaration n) {
      String _ret="";
      _ret += n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public String visit(ClassDeclaration n) {
      String _ret="";
      curr_class = n.f1.f0.tokenImage;
      n.f3.accept(this);
      _ret += n.f4.accept(this);
      curr_class = "";
      flush_class();
      return _ret + "\n";
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public String visit(ClassExtendsDeclaration n) {
      String _ret="";
      curr_class = n.f1.f0.tokenImage;
      n.f5.accept(this);
      add_extend_vars();
      _ret += n.f6.accept(this);      
      curr_class = "";
      flush_class();
      return _ret + "\n";
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public String visit(VarDeclaration n) {
      String _ret="";
      String type = n.f0.accept(this);
      
      if(insidefn){
    	  add_local_var(n.f1.f0.tokenImage, type);
      }
      else{
    	  add_class_var(n.f1.f0.tokenImage, type, curr_class);
      }
      
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public String visit(MethodDeclaration n) {
	   insidefn = true;
	   param_count = 0;
	   
	   String _ret= curr_class + "_" + n.f2.f0.tokenImage + " [ ";
	   String num = n.f4.accept(this);
	   if(num == "")
		   _ret += Integer.toString(0);
	   else
		   _ret += num;
      _ret += " ] BEGIN\n ";
      n.f7.accept(this);
      _ret += n.f8.accept(this) + " ";
      _ret += " RETURN " + n.f10.accept(this) + " \nEND ";
      
      insidefn = false;
      flush_local();
      return _ret + "\n";
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public String visit(FormalParameterList n) {
      n.f0.accept(this);
      n.f1.accept(this);
      return Integer.toString(param_count+1);
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public String visit(FormalParameter n) {
      param_count++;
      String type = n.f0.accept(this);
      add_local_var(n.f1.f0.tokenImage, type, param_count);
      return "";
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public String visit(FormalParameterRest n) {
      n.f1.accept(this);
      return "";
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public String visit(Type n) {
      typelookup = true;
	  n.f0.accept(this);
	  typelookup = false;
	  
	  String _ret = curr_type;
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public String visit(ArrayType n) {
      curr_type = "int[]";
      return "";
   }

   /**
    * f0 -> "boolean"
    */
   public String visit(BooleanType n) {
	  curr_type = "boolean";
      return "";
   }

   /**
    * f0 -> "int"
    */
   public String visit(IntegerType n) {
	  curr_type = "int";
      return "";
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public String visit(Statement n) {
	   return n.f0.accept(this);
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public String visit(Block n) {
      return n.f1.accept(this);
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public String visit(AssignmentStatement n) {
      String _ret="";
      heaped = false;
      String s = n.f0.accept(this);
      
      if(heaped){
    	  _ret += " HSTORE " + class_var_lvalue + " 0 " + n.f2.accept(this) + " ";
      }
      else{
    	  _ret += " MOVE " + s + " " + n.f2.accept(this) + " ";
      }
      return _ret + "\n";
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public String visit(ArrayAssignmentStatement n) {
      String _ret="";
      heaped = false;
      String base  = n.f0.accept(this);
      String lval = class_var_lvalue;
      String index = n.f2.accept(this);
      String value = n.f5.accept(this);

      if(heaped){
    	  String off = getNewTemp();
    	  String arraybase = getNewTemp();
    	  String length = getNewTemp();
    	  
    	  String oklabel = getNewLabel();
    	  
    	  _ret += " HLOAD TEMP " + arraybase + " " + lval + " 0 ";
    	  _ret += " HSTORE PLUS TEMP " + arraybase + " ";
    	  
    	  _ret += " BEGIN\n MOVE TEMP " + off + " TIMES 4 " + index + " ";
    	  _ret += " CJUMP MINUS 1 LE TEMP " + off + " TIMES 4 MINUS BEGIN\n HLOAD TEMP " + length + " TEMP " + arraybase + " 0 RETURN TEMP " + length + " \nEND 1 " + oklabel + " ";
    	  _ret += " ERROR " + oklabel + " NOOP RETURN PLUS 4 TEMP " + off + " \nEND 0 ";
    	  _ret += value + " ";
      }
      else{
    	  String off = getNewTemp();
    	  String arraybase = getNewTemp();
    	  String length = getNewTemp();
    	  
    	  String oklabel = getNewLabel();
    	  
    	  _ret += " MOVE TEMP " + arraybase + " " + base + " ";
    	  _ret += " HSTORE PLUS TEMP " + arraybase + " ";
    	  
    	  _ret += " BEGIN\n MOVE TEMP " + off + " TIMES 4 " + index + " ";
    	  _ret += " CJUMP MINUS 1 LE TEMP " + off + " TIMES 4 MINUS BEGIN\n HLOAD TEMP " + length + " TEMP " + arraybase + " 0 RETURN TEMP " + length + " \nEND 1 " + oklabel + " ";
    	  _ret += " ERROR " + oklabel + " NOOP RETURN PLUS 4 TEMP " + off + " \nEND 0 ";
    	  _ret += value + " ";
      }
      
      return _ret + "\n";
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public String visit(IfStatement n) {
      return n.f0.accept(this);
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public String visit(IfthenStatement n) {
      String falselabel = getNewLabel();
	   
	  String _ret=" CJUMP " + n.f2.accept(this) + " " + falselabel + " ";
      _ret += n.f4.accept(this) + " ";
      _ret += falselabel + " NOOP ";
      return _ret + "\n";
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public String visit(IfthenElseStatement n) {
	  String elselabel = getNewLabel();
	  String endlabel  = getNewLabel();
	   
      String _ret=" CJUMP " + n.f2.accept(this) + " " + elselabel + " ";
      _ret += n.f4.accept(this) + " JUMP " + endlabel + " ";
      _ret += elselabel + " NOOP " + n.f6.accept(this) + " ";
      _ret += endlabel + " NOOP ";
      return _ret + "\n";
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public String visit(WhileStatement n) {
      String beginlabel = getNewLabel();
      String endlabel   = getNewLabel();
      
      String _ret= beginlabel + " NOOP ";
      _ret += " CJUMP " + n.f2.accept(this) + " " + endlabel + " "; 
      _ret += n.f4.accept(this) + " ";
      _ret += " JUMP " + beginlabel + " ";
      _ret += endlabel + " NOOP ";
      
      return _ret + "\n";
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public String visit(PrintStatement n) {
      String _ret=" PRINT ";
      _ret += n.f2.accept(this) + " ";
      return _ret + "\n";
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public String visit(Expression n) {
      return n.f0.accept(this);
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public String visit(AndExpression n) {
      String _ret="BEGIN\n ";
      
      String falselabel = getNewLabel();
      String truelabel  = getNewLabel();
      String res = getNewTemp();
      
      _ret += " CJUMP " + n.f0.accept(this) + " " + falselabel + " ";
      _ret += " CJUMP " + n.f2.accept(this) + " " + falselabel + " ";
      _ret += " MOVE TEMP " + res + " 1 ";
      _ret += " JUMP " + truelabel + " ";
      _ret += falselabel + " MOVE TEMP " + res + " 0 " + truelabel + " NOOP ";
      _ret += " RETURN TEMP " + res + " \nEND ";
      
      return _ret + "\n";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public String visit(OrExpression n) {
      String _ret=" BEGIN\n ";
      
      String falselabel = getNewLabel();
      String truelabel  = getNewLabel();
      String res = getNewTemp();
      
      _ret += " CJUMP MINUS 1 " + n.f0.accept(this) + " " + truelabel + " ";
      _ret += " CJUMP MINUS 1 " + n.f2.accept(this) + " " + truelabel + " ";
      _ret += " MOVE TEMP " + res + " 0 ";
      _ret += " JUMP " + falselabel + " ";
      _ret += truelabel + " MOVE TEMP " + res + " 1 " + falselabel + " NOOP ";
      _ret += " RETURN TEMP " + res + " \nEND ";
      
      return _ret + "\n";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public String visit(CompareExpression n) {
      String _ret=" LE ";
      _ret += n.f0.accept(this) + " ";
      _ret += n.f2.accept(this) + " ";
      return _ret + "\n";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public String visit(neqExpression n) {
      String _ret=" NE ";
      _ret += n.f0.accept(this) + " ";
      _ret += n.f2.accept(this) + " ";
      return _ret + "\n";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public String visit(PlusExpression n) {
      String _ret=" PLUS ";
      _ret += n.f0.accept(this) + " ";
      _ret += n.f2.accept(this) + " ";
      return _ret + "\n";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public String visit(MinusExpression n) {
      String _ret=" MINUS ";
      _ret += n.f0.accept(this) + " ";
      _ret += n.f2.accept(this) + " ";
      return _ret + "\n";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public String visit(TimesExpression n) {
      String _ret=" TIMES ";
      _ret += n.f0.accept(this) + " ";
      _ret += n.f2.accept(this) + " ";
      return _ret + "\n";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public String visit(DivExpression n) {
      String _ret = " DIV ";
 	  _ret += n.f0.accept(this) + " ";
	  _ret += n.f2.accept(this) + " ";
      return _ret + "\n";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public String visit(ArrayLookup n) {
      String _ret=" BEGIN\n ";
      
      String array = getNewTemp();
      String res   = getNewTemp();
      String offset = getNewTemp();
      String length = getNewTemp();
      
      String label = getNewLabel();
      
      _ret += " MOVE TEMP " + array + " " + n.f0.accept(this) + " ";
      _ret += " HLOAD TEMP " + res + " PLUS TEMP " + array + " PLUS ";
      _ret += " BEGIN\n MOVE TEMP " + offset + " TIMES " + n.f2.accept(this) + " 4 ";
      _ret += " HLOAD TEMP " + length + " TEMP " + array + " 0 ";
      _ret += " CJUMP MINUS 1 LE TEMP " + offset + " TIMES MINUS TEMP " + length + " 1 4 " + label + " ";
      _ret += " ERROR ";
      _ret += label + " NOOP RETURN TEMP " + offset + " \nEND 4 0 RETURN TEMP " + res + " \nEND ";
    		  
      return _ret + "\n";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public String visit(ArrayLength n) {
      String _ret="";
      
      String array = getNewTemp();
      String res   = getNewTemp();
      _ret += " BEGIN\n MOVE TEMP " + array + " " + n.f0.accept(this) + " ";
      _ret += " HLOAD TEMP " + res + " TEMP " + array + " 0 ";
      _ret += " RETURN TEMP " + res + " \nEND ";

      return _ret + "\n";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public String visit(MessageSend n) {
      String _ret=" BEGIN\n ";
      String vtable_base = getNewTemp();
      String call_res    = getNewTemp();
      String fn          = getNewTemp();
      String obj         = getNewTemp();
      
      _ret += " MOVE TEMP " + obj + " " + n.f0.accept(this) + " ";
      _ret += " HLOAD TEMP " + vtable_base + " TEMP " + obj + " 0 ";
      
      int fnindex = structure.get(curr_type).methods.get(n.f2.f0.tokenImage); 
      
      _ret += " MOVE TEMP " + call_res + " CALL BEGIN\n HLOAD TEMP " + fn + " PLUS TEMP " + vtable_base + " TIMES 4 " + fnindex + " 0 RETURN TEMP " + fn + " \nEND ( ";
      _ret += " TEMP " + obj + " "; //add this ptr
      _ret += n.f4.accept(this) + " ) RETURN TEMP " + call_res + " \nEND ";
      
      return _ret + "\n";
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public String visit(ExpressionList n) {
      String _ret = n.f0.accept(this) + " ";
      _ret += n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public String visit(ExpressionRest n) {
      return n.f1.accept(this) + " ";
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public String visit(PrimaryExpression n) {
      String _ret=" ";
      _ret += n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public String visit(IntegerLiteral n) {
      String _ret = " " + n.f0.tokenImage;
      _ret += " ";
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public String visit(TrueLiteral n) {
      return " 1 ";
   }

   /**
    * f0 -> "false"
    */
   public String visit(FalseLiteral n) {
      return " 0 ";
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public String visit(Identifier n) {
      String _ret="";
      
      if(typelookup){
    	  curr_type = n.f0.tokenImage;
    	  return _ret;
      }
      else{
    	  Obj o = get_var(n.f0.tokenImage);
    	  curr_type = o.type;
    	  if(o.origin == "class"){
    		  heaped = true;
    		  String res = getNewTemp();
    		  class_var_lvalue = " BEGIN\n MOVE TEMP " + res + " PLUS TEMP 0 PLUS 4 TIMES 4 " + o.index + " RETURN TEMP " + res + " \nEND ";
    		  String ret_temp = getNewTemp();
    		  return " BEGIN\n HLOAD TEMP " + ret_temp + " BEGIN\n MOVE TEMP " + res + " PLUS TEMP 0 PLUS 4 TIMES 4 " + o.index + " RETURN TEMP " + res + " \nEND 0 RETURN TEMP " + ret_temp + " \nEND "  + "\n";
    	  }
    	  else{
    		  heaped = false;
    		  return " TEMP " + o.index + " ";
    	  }
      }
   }

   /**
    * f0 -> "this"
    */
   public String visit(ThisExpression n) {
       curr_type = curr_class;
	   return " TEMP 0 ";
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public String visit(ArrayAllocationExpression n) {
      String _ret=" BEGIN\n ";
      
      String base_addr = getNewTemp();
      String ind       = getNewTemp();
      String expr      = getNewTemp();
      _ret += " MOVE TEMP " + expr + " " + n.f3.accept(this) + " ";
      _ret += " MOVE TEMP " + base_addr + " HALLOCATE TIMES PLUS TEMP " + expr + " 1 4 ";
      _ret += " MOVE TEMP " + ind + " 4 ";
      
      String start = getNewLabel();
      String end   = getNewLabel();
      _ret += " " + start + " CJUMP LE TEMP " + ind + " MINUS TIMES PLUS TEMP " + expr + " 1 4 1 " + end + " ";
      _ret += " HSTORE PLUS TEMP " + base_addr + " TEMP " + ind + " 0 0 ";
      _ret += " MOVE TEMP " + ind + " PLUS TEMP " + ind + " 4 ";
      _ret += " JUMP " + start + " ";
      _ret += " " + end + " HSTORE TEMP " + base_addr + " 0 TEMP " + expr + " ";
      _ret += " RETURN TEMP " + base_addr + " \nEND ";

      curr_type = "int[]";
      return _ret + "\n";
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public String visit(AllocationExpression n) {
	  String _ret= " BEGIN\n ";
	   
	  class_struct cs = structure.get(n.f1.f0.tokenImage);
	  int meth_num = cs.meth_count();
	  int var_num  = cs.field_count();
	  
	  String meth_array  = getNewTemp();
	  _ret += " MOVE TEMP " + meth_array + " HALLOCATE " + Integer.toString(meth_num*4) + " ";
	  String field_array = getNewTemp();
	  _ret += " MOVE TEMP " + field_array + " HALLOCATE " + Integer.toString(var_num*4 + 4) + " ";
	  
	  // Make vtable entries
	  String obj = field_array;
	  for(int i=0;i<meth_num; i++){
		  _ret += " HSTORE TEMP " + meth_array + " " + Integer.toString(i*4) + " " + cs.method_i(i) + " ";
	  }

	  String ind = getNewTemp();
	  _ret += " MOVE TEMP " + ind + " 4 ";
	  String label = getNewLabel();
	  String endlabel = getNewLabel();
	  _ret += " " + label + " CJUMP LE TEMP " + ind + " " + Integer.toString(var_num*4 + 3) + " " + endlabel + " ";
	  _ret += " HSTORE PLUS TEMP " + field_array + " TEMP " + ind + " 0 0 ";
	  _ret += " MOVE TEMP " + ind + " PLUS TEMP " + ind + " 4 ";
	  _ret += " JUMP " + label + " " + endlabel + " ";
	  _ret += " HSTORE TEMP " + obj + " 0 TEMP " + meth_array + " ";
	  _ret += " RETURN TEMP " + obj + " \nEND ";
	  
	  curr_type = n.f1.f0.tokenImage;
      return _ret + "\n";  
   }
   
   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public String visit(NotExpression n) {
      String _ret="";
      
      String neg = getNewTemp();
      _ret += " BEGIN\n MOVE TEMP " + neg + " MINUS 1 " + n.f1.accept(this) + " RETURN TEMP " + neg + " \nEND ";
      return _ret + "\n";
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public String visit(BracketExpression n) {
      return n.f1.accept(this) + "\n";
   }
}
