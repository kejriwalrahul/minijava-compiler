//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class TypeCheck extends GJNoArguDepthFirst<String> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
	
   //My variables:
   HashMap<String, HashSet<String>> scope_vars = new HashMap<String, HashSet<String>>();
   HashMap<String, String>    			vars_type  = new HashMap<String, String>();
   HashMap<String, String> 		     	parent     = new HashMap<String, String>();
   HashMap<String, String> 			    fn_param   = new HashMap<String, String>();
   ArrayList<String>                scope_stack= new ArrayList<String>();
   boolean pass = false;
   
   //1 if id lookup is as type  
   int idlookup = 0;
   String list = "";
   
   String mclass;

   //  Toggle debug mode
   boolean debug = false;
   
   public void check_loop(){
	   for(String s : parent.keySet()){
		   if(check_class_loop(s) == true)
			   error();
	   }
   }
   
   public boolean check_class_loop(String c){
	   String t;
	   t = new String(c);
	   HashSet<String> s = new HashSet<String>(); 
     do{
       s.add(t);
		   if(parent.containsKey(t))
			   t = parent.get(t);
		   else
			   return false;
		   
		   if(s.contains(t))
			   return true;
	   }while(true);
   }
   
   public void printdump(){
	   /*if(debug){
		   System.out.println("Scope vars hashmap:");
		   System.out.println(scope_vars.toString()); 

		   System.out.println();
		   
		   System.out.println("vars type hashmap:");
		   System.out.println(vars_type.toString());
		   
		   System.out.println();
		   
		   System.out.println("parent hashmap:");
		   System.out.println(parent.toString());
		   
		   System.out.println();
		   
		   System.out.println("fn_param hashmap:");
		   System.out.println(fn_param.toString());
		   
		   System.out.println();
		   
		   System.out.println("Scope stack:");
		   System.out.println(scope_stack.toString());   
	   }*/
   }
   
   public void error(){
	   System.out.println("Type error");
	   if(debug){
		   System.out.println(scope_stack);   
	   }
	   System.exit(0);
   }
   
   public void error(String e){
	   /*if(debug){
		   System.out.println("Type error: " + e);
		   System.out.println(scope_stack);   
	   }
	   else{
		   System.out.println("Type error");
	   }
	   System.exit(0);*/
     error();
   }
   
   public String full_scope(){
	   String full_name = "";
	   for(int i=0;i<scope_stack.size();i++)
		   full_name = full_name + ":" + scope_stack.get(i);
	   return full_name;
   }
   
   public String full_scope(int j){
	   String full_name = "";
	   for(int i=0;i<scope_stack.size()-j;i++)
		   full_name = full_name + ":" + scope_stack.get(i);
	   return full_name;
   }
   
   public void beginScope(String s){
	   scope_stack.add(s);
	   String scope = full_scope(); 
	   if(scope_vars.containsKey(scope) == false){
		   HashSet<String> set = new HashSet<String>();
		   scope_vars.put(scope, set);
	   }
   }
   
   public String endScope(){
	   String s = scope_stack.get(scope_stack.size()-1);
	   scope_stack.remove(scope_stack.size()-1);
	   return s;
   }
   
   public void addVar(String id, String type){
	   String curr_scope = full_scope();
	   
	   if(scope_vars.get(curr_scope).contains(id) == true)
		   error();
	   
	   scope_vars.get(curr_scope).add(id);
	   vars_type.put(curr_scope + ":" + id, type);
   }
   
   public String getTypeForScope(String id, String scope){
	   while(true){
		   if(scope_vars.get(scope).contains(id))
			   return vars_type.get(scope+":"+id);
		   
		   String scope_name = scope.substring(scope.lastIndexOf(':')+1); 
		   if(parent.containsKey(scope_name) == false)
			   return "";
		   
		   scope = ":global:" + parent.get(scope_name);
	   }
   }
   
   public String getClassForScope(String id, String scope){
	   while(true){
		   if(scope_vars.get(scope).contains(id))
			   return scope;
		   
		   String scope_name = scope.substring(scope.lastIndexOf(':')+1); 
		   if(parent.containsKey(scope_name) == false)
			   return "";
		   
		   scope = ":global:" + parent.get(scope_name);
	   }
   }
   
   public String getType(String id){
	   for(int i = 0; i<scope_stack.size(); i++){
		   String curr_scope = full_scope(i);
		   String s = getTypeForScope(id, curr_scope);
		   if(s!="")
			   return s;
	   }
       error();
	   return "";
   }
   
   public boolean isequal(String parent_class, String child_class){
	   while(true){
		   if(parent_class.equals(child_class))
			   return true;
		   
		   if(parent.containsKey(child_class))
			   child_class = parent.get(child_class);
		   else
			   return false;
	   }
   }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public String visit(Goal n) {
	  beginScope("global");
	  
	  if(pass){
		  check_loop();
	  }
	  
      String _ret="";
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      
      endScope();
      pass = true;
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public String visit(MainClass n) {
    	   
	  if(!pass){
		  addVar(n.f1.f0.tokenImage, "class");  
      }
     
      if(!pass){
        mclass = n.f1.f0.tokenImage;
      }

	  beginScope(n.f1.f0.tokenImage);
      
	  if(!pass){
		  addVar("main()", "void");
	  }
	  
	  beginScope("main()");
	  
	  if(!pass){
		  addVar(n.f11.f0.tokenImage, "String[]");
	      fn_param.put(full_scope(), "String[]");  
	  }
	        
      String _ret="";
      n.f0.accept(this);
      //n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      //n.f11.accept(this);
      n.f12.accept(this);
      n.f13.accept(this);
      n.f14.accept(this);
      n.f15.accept(this);
      n.f16.accept(this);
      
      endScope();
      endScope();
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public String visit(TypeDeclaration n) {
      String _ret="";
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public String visit(ClassDeclaration n) {
	  
	  if(!pass){
		  addVar(n.f1.f0.tokenImage, "class");
	    if(mclass.equals(n.f1.f0.tokenImage))
          error();
      }
	  
	  beginScope(n.f1.f0.tokenImage);
	   
	  String _ret="";
      n.f0.accept(this);
      //n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      
      endScope();

      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public String visit(ClassExtendsDeclaration n) {
	  
	  if(!pass){
        addVar(n.f1.f0.tokenImage, "class");
        if(mclass.equals(n.f1.f0.tokenImage))
          error();
      }
	  
	  beginScope(n.f1.f0.tokenImage);
	  
	  if(!pass){
        parent.put(n.f1.f0.tokenImage, n.f3.f0.tokenImage);
	    if(mclass.equals(n.f3.f0.tokenImage))
          error();
      }
	  
      if(pass){
        if(!scope_vars.get(":global").contains(n.f3.f0.tokenImage)){
          error();
        }
      }

      String _ret="";
      n.f0.accept(this);
      //n.f1.accept(this);
      n.f2.accept(this);
      //n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      
      endScope();
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public String visit(VarDeclaration n) {
      String _ret="";
      String type = n.f0.accept(this);
      //n.f1.accept(this);
      n.f2.accept(this);
      
      if(!pass){
    	  addVar(n.f1.f0.tokenImage, type);
      }
      
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public String visit(MethodDeclaration n) {
	  String _ret="";
      n.f0.accept(this);
      String type = n.f1.accept(this);
      
      if(!pass){
    	  addVar(n.f2.f0.tokenImage+"()", type);
      }

      if(pass){
          //Checking function overloading wrt base classes 
          String pclass; 
          // Check if base class
          if(parent.containsKey(scope_stack.get(1))){
                pclass = parent.get(scope_stack.get(1));

                // Check if function exists in parents
                String does_exists = getTypeForScope(n.f2.f0.tokenImage+"()", ":global:" + pclass);
                // If exists
                if(does_exists != ""){
                    // If return type mismatch, error()
                    if(type != does_exists)
                        error();

                    String fn_class = getClassForScope(n.f2.f0.tokenImage+"()", ":global:" + pclass);
                    String fn_params =  fn_param.get(fn_class + ":" + n.f2.f0.tokenImage+"()");

                    // If argument mismatch, error()
                    if(fn_params != fn_param.get(full_scope() + ":" + n.f2.f0.tokenImage+"()"))
                        error();
                }
          }
      }
      
      beginScope(n.f2.f0.tokenImage+"()");
      
      //n.f2.accept(this);
      n.f3.accept(this);
      
      n.f4.accept(this);
      if(!pass){
    	  fn_param.put(full_scope(), list);  
      }
      
      list = new String();
      list = "";
      
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      String s = n.f10.accept(this);
      
      if(pass){
    	  if(!isequal(type, s))
    		  error();
      }
      
      n.f11.accept(this);
      n.f12.accept(this);
      
      endScope();
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public String visit(FormalParameterList n) {
      String _ret="";
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public String visit(FormalParameter n) {
      String _ret="";
      String type = n.f0.accept(this);
      
      if(!pass){
    	  addVar(n.f1.f0.tokenImage, type);  
      }
      list = list + type;
      
      //n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public String visit(FormalParameterRest n) {
      String _ret="";
      n.f0.accept(this);
      list = list+",";
      _ret = n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public String visit(Type n) {
      String _ret="";
      idlookup = 1;
      _ret = n.f0.accept(this);
      idlookup = 0;
      
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public String visit(ArrayType n) {
      String _ret="int[]";
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public String visit(BooleanType n) {
      String _ret="boolean";
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public String visit(IntegerType n) {
      String _ret="int";
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public String visit(Statement n) {
      String _ret="";
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public String visit(Block n) {
      String _ret="";
      
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public String visit(AssignmentStatement n) {
      String _ret="";
      String var = n.f0.accept(this);
      n.f1.accept(this);
      String val = n.f2.accept(this);
      n.f3.accept(this);
      
      if(pass){
    	  if(!isequal(var, val))
    		  error();
      }
      
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public String visit(ArrayAssignmentStatement n) {
      String _ret="";
      String var = n.f0.accept(this);
      n.f1.accept(this);
      String index = n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      String val = n.f5.accept(this);
      n.f6.accept(this);
      
      if(pass){
          // if(var != "int[]" && var !="String[]")
    	  if(var != "int[]")
    		  error();
    	  if(index != "int")
    		 error();
    	  if(var == "int[]" && val != "int")
    		  error();
    	  // if(var == "String[]" && val != "String")
    		  // error();
      }
      
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public String visit(IfStatement n) {
      String _ret="";
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public String visit(IfthenStatement n) {
      String _ret="";
      n.f0.accept(this);
      n.f1.accept(this);
      String s = n.f2.accept(this);
      
      if(pass){
    	  if(s != "boolean")
    		  error();
      }
      
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public String visit(IfthenElseStatement n) {
      String _ret="";
      n.f0.accept(this);
      n.f1.accept(this);
      String s = n.f2.accept(this);
      
      if(pass){
    	  if(s != "boolean")
    		  error();
      }
      
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public String visit(WhileStatement n) {
      String _ret="";
      n.f0.accept(this);
      n.f1.accept(this);
      String s = n.f2.accept(this);
      
      if(pass){
    	  if(s != "boolean")
    		  error();
      }
      
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public String visit(PrintStatement n) {
      String _ret="";
      n.f0.accept(this);
      n.f1.accept(this);
      String s = n.f2.accept(this);
      
      if(pass){
    	  if(s != "int")
    		  error();
      }
      
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public String visit(Expression n) {
      String _ret="";
      _ret = n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public String visit(AndExpression n) {
      String _ret="";
      String l = n.f0.accept(this);
      n.f1.accept(this);
      String r = n.f2.accept(this);
      
      if(pass){
    	  if(l != "boolean" || r != "boolean")
    		  error();
    	  _ret = "boolean";    	  
      }
      
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public String visit(OrExpression n) {
      String _ret="";
      String l = n.f0.accept(this);
      n.f1.accept(this);
      String r = n.f2.accept(this);
      
      if(pass){
    	  if(l != "boolean" || r != "boolean")
    		  error();
    	  _ret = "boolean";    	  
      }
      
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public String visit(CompareExpression n) {
      String _ret="";
      String l = n.f0.accept(this);
      n.f1.accept(this);
      String r = n.f2.accept(this);
      
      if(pass){
    	  if(l != "int" || r != "int")
    		  error();
    	  _ret = "boolean";    	  
      }
      
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
    // if(!isequal(l,r) && !isequal(r,l))
   public String visit(neqExpression n) {
      String _ret="";
      String l = n.f0.accept(this);
      n.f1.accept(this);
      String r = n.f2.accept(this);
      
      if(pass){
        if(l!=r || (l!="int" && l!="boolean")) 
          error();
    	  
    	  _ret = "boolean";    	  
      }
      
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public String visit(PlusExpression n) {
      String _ret="";
      String l = n.f0.accept(this);
      n.f1.accept(this);
      String r = n.f2.accept(this);
      
      if(pass){
    	  if(l != "int" || r != "int")
    		  error();
    	  _ret = "int";    	  
      }
      
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public String visit(MinusExpression n) {
      String _ret="";
      String l = n.f0.accept(this);
      n.f1.accept(this);
      String r = n.f2.accept(this);
      
      if(pass){
    	  if(l != "int" || r != "int")
    		  error();
    	  _ret = "int";    	  
      }
      
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public String visit(TimesExpression n) {
      String _ret="";
      String l = n.f0.accept(this);
      n.f1.accept(this);
      String r = n.f2.accept(this);
      
      if(pass){
    	  if(l != "int" || r != "int")
    		  error();
    	  _ret = "int";    	  
      }
      
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public String visit(DivExpression n) {
      String _ret="";
      String l = n.f0.accept(this);
      n.f1.accept(this);
      String r = n.f2.accept(this);
      
      if(pass){
    	  if(l != "int" || r != "int")
    		  error();
    	  _ret = "int";
      }
      
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public String visit(ArrayLookup n) {
      String _ret="";
      String var_type = n.f0.accept(this);
      n.f1.accept(this);
      String index = n.f2.accept(this);
      
      if(pass){
    	  if(var_type == "int[]")
    		  _ret = "int";
		  // else if(var_type == "String[]")
			  // _ret = "String";
		  else
			  error();
    	  
    	  if(index != "int")
    		  error();
      }
      
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public String visit(ArrayLength n) {
      String _ret="";
      String s = n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      
      if(pass){
          // if(s!= "String[]" && s!="int[]")
    	  if(s!="int[]")
    		  error();
    	  _ret = "int";
      }
      
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public String visit(MessageSend n) {
      String _ret="";
      
      String cname = n.f0.accept(this);
      if(pass){
    	  //Check if class exists 
    	  if(scope_vars.get(":global").contains(cname) == false)
    		  error("at message send1");
    	  
    	  //Check if fn exists and get return type if it does    	  
    	  _ret = getTypeForScope(n.f2.f0.tokenImage+"()", ":global:"+cname);
    	  if(_ret == ""){
    		  error("at message send2");
        }
      }

      n.f1.accept(this);
      //n.f2.accept(this);
      n.f3.accept(this);
      String etype = n.f4.accept(this);
      
      if(pass){
    	  //Check if expression list type matches    	  
    	  String real_class_name = getClassForScope(n.f2.f0.tokenImage+"()", ":global:"+cname);
    	  if(real_class_name == "")
              error();
          if(etype == null)
    		  etype = "";
    	  
    	  String[] params 		= fn_param.get(real_class_name + ":" +  n.f2.f0.tokenImage + "()").split(",");
    	  String[] expr_params 	= etype.split(",");
    	  
    	  if(params.length != expr_params.length)
    		  error("unequal args");
    	  
    	  for(int i=0; i< params.length; i++ )
    		  if(!isequal(params[i], expr_params[i])){
    			  error("at message send3");
    		  }
    			  
      }
      
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public String visit(ExpressionList n) {
      String _ret="";
      list = list + n.f0.accept(this);
      n.f1.accept(this);
      _ret = list;
      list = new String();
      list = "";
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public String visit(ExpressionRest n) {
      String _ret="";
      n.f0.accept(this);
      list = list + ",";
      list = list + n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public String visit(PrimaryExpression n) {
      String _ret="";
      _ret = n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public String visit(IntegerLiteral n) {
      String _ret="int";
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public String visit(TrueLiteral n) {
      String _ret="boolean";
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public String visit(FalseLiteral n) {
      String _ret="boolean";
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public String visit(Identifier n) {
      String _ret="";
      
      if(idlookup == 1){
          if(pass){
        	  if(!scope_vars.get(":global").contains(n.f0.tokenImage))
        		  error();
              if(mclass.equals(n.f0.tokenImage))
                  error();
          }
    	  return n.f0.tokenImage;
      }
      
      n.f0.accept(this);
      
      if(pass){
          _ret = getType(n.f0.tokenImage);
          if(_ret == "")
        	  error("id not found");
      }
      
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public String visit(ThisExpression n) {
      String _ret="";
      _ret = scope_stack.get(1);
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public String visit(ArrayAllocationExpression n) {
      String _ret="int[]";
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      
      String s = n.f3.accept(this);
      if(pass){
          if(s != "int")
        	  error();
      }
      
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public String visit(AllocationExpression n) {
      String _ret = n.f1.f0.tokenImage;
      n.f0.accept(this);
      String s = n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);

      if(pass){
          if(s != "class")
            error();
      }

      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public String visit(NotExpression n) {
      String _ret="";
      n.f0.accept(this);
      _ret = n.f1.accept(this);
      
      if(pass){
    	  if(_ret != "boolean")
        	  error();
      }
      
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public String visit(BracketExpression n) {
      String _ret="";
      n.f0.accept(this);
      _ret = n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   //Useless grammars: Unreachable code   
   
   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public String visit(IdentifierList n) {
      String _ret="";
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public String visit(IdentifierRest n) {
      String _ret="";
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

}