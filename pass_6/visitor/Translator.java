//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class Translator extends GJNoArguDepthFirst<String> {
   String sexpr_type = "";
   String opcode, lsrc, rsrc;
   String pretext = "";
   int argc = 0;

   boolean isimmediate = false;
   
   public void addPretext(String s){
	   pretext += "\t" + s + "\n";
   }
   
   public String getPretext(){
	   String temp = pretext;
	   pretext = "";
	   return temp;
   }
   
   public void error(String s){
	   System.out.println("Error: " + s);
	   System.exit(1);
   }
   
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public String visit(NodeList n) {
      String _ret="";
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         _ret += e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public String visit(NodeListOptional n) {
      if ( n.present() ) {
         String _ret="";
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            _ret += e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return "";
   }

   public String visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this)+":";
      else
         return "";
   }

   public String visit(NodeSequence n) {
      String _ret="";
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
    	 _ret += e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public String visit(NodeToken n) { return n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( Procedure() )*
    * f13 -> VariablePackingInfo()
    * f14 -> <EOF>
    */
   public String visit(Goal n) {
	  argc = Integer.parseInt(n.f2.accept(this));
	  if(argc < 4)	argc = 4;
      int sspace = Integer.parseInt(n.f5.accept(this));
      int callspace = Integer.parseInt(n.f8.accept(this));
      
	  String _ret=".text\n.globl main\n";
      _ret += "main:\n";
      _ret += "\tmove $fp, $sp\n";
      _ret += "\tsw $ra, -4($sp)\n";
      _ret += "\tsubu $sp, $sp, " + Integer.toString(4*(sspace-argc+4 + callspace+1)) + "\n";
         
      _ret += n.f10.accept(this);
      
      _ret += "\taddu $sp, $sp, " + Integer.toString(4*(sspace-argc+4 + callspace+1)) + "\n";
      _ret += "\tlw $ra, -4($sp)\n";
      _ret += "\tjr $ra\n";
	   
      _ret += n.f12.accept(this);      
      
      _ret += "\n\n.text \n.globl _halloc \n_halloc: \n\tli $v0, 9 \n\tsyscall \n\tjr $ra\n";
      _ret += "\n\n.text \n.globl _print  \n_print:  \n\tli $v0, 1 \n\tsyscall \n\tla $a0, newl \n\tli $v0, 4 \n\tsyscall \n\tjr $ra\n";
      _ret += "\n\n.data \n.align 0 \nnewl: .asciiz \"\\n\" \n\n\n.data \n.align 0 \nstr_er: .asciiz \"ERROR: abnormal termination\\n\"\n";
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public String visit(StmtList n) {
	   return n.f0.accept(this);
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    */
   public String visit(Procedure n) {
	  String s = n.f0.accept(this);
	  argc = Integer.parseInt(n.f2.accept(this));
	  if(argc < 4)	argc = 4;
      int sspace = Integer.parseInt(n.f5.accept(this));
      int callspace = Integer.parseInt(n.f8.accept(this));
      
	  String _ret="\n\n.text\n.globl " + s + "\n";
      _ret += s + ":\n";
      _ret += "\tsw $fp, -8($sp)\n";
      _ret += "\tmove $fp, $sp\n";
      _ret += "\tsw $ra, -4($sp)\n";
      _ret += "\tsubu $sp, $sp, " + Integer.toString(4*(sspace-argc+4 + callspace + 1)) + "\n";
         
      _ret += n.f10.accept(this);
      
      _ret += "\taddu $sp, $sp, " + Integer.toString(4*(sspace-argc+4 + callspace + 1)) + "\n";
      _ret += "\tlw $ra, -4($sp)\n";
      _ret += "\tlw $fp, -8($sp)\n";
      _ret += "\tjr $ra\n";
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public String visit(Stmt n) {
	  return "\t" + n.f0.accept(this);
   }

   /**
    * f0 -> "NOOP"
    */
   public String visit(NoOpStmt n) {
      String _ret="nop\n";
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public String visit(ErrorStmt n) {
      return "b str_er\n";
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public String visit(CJumpStmt n) {
      String _ret="beqz " + n.f1.accept(this) + ", " + n.f2.accept(this);
      return _ret + "\n";
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public String visit(JumpStmt n) {
      String _ret="b " + n.f1.accept(this) + "\n";
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public String visit(HStoreStmt n) {
      String _ret="sw " + n.f3.accept(this) + ", " + n.f2.accept(this) + "(" + n.f1.accept(this) + ")\n";
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public String visit(HLoadStmt n) {
      String _ret="lw " + n.f1.accept(this) + ", " + n.f3.accept(this) + "(" + n.f2.accept(this) + ")\n";
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public String visit(MoveStmt n) {
      String _ret="";
      String s = n.f2.accept(this);
      if(n.f2.f0.choice instanceof HAllocate){
    	  _ret = getPretext();
    	  _ret += "\tmove " + n.f1.accept(this) + ", " + s + "\n";
      }
      else if(n.f2.f0.choice instanceof BinOp){
    	  _ret = opcode + " " + n.f1.accept(this) + ", " + lsrc + ", " + rsrc + "\n"; 
      }
      else{
    	  if(sexpr_type == "Reg")
    		  _ret = "move " + n.f1.accept(this) + ", " + s + "\n";
    	  else if(sexpr_type == "Label")
    		  _ret = "la " + n.f1.accept(this) + ", " + s + "\n";
    	  else
    		  _ret = "li " + n.f1.accept(this) + ", " + s + "\n";
      }
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public String visit(PrintStmt n) {
      String _ret= "move $a0, " + n.f1.accept(this) + "\n";
      _ret += "\tjal _print\n";
      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public String visit(ALoadStmt n) {
      String _ret="lw " + n.f1.accept(this) + ", ";
      int index = Integer.parseInt(n.f2.accept(this));
      if(index < argc-4)
    	  _ret += Integer.toString(index*4) + "($fp)";
      else
    	  _ret += Integer.toString((index-argc+4)*-4 + -12) + "($fp)";
      return _ret + "\n";
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public String visit(AStoreStmt n) {
      String _ret="sw " + n.f2.accept(this) + ", ";
      int index = Integer.parseInt(n.f1.accept(this));
      if(index < argc-4)
    	  _ret += Integer.toString(index*4) + "($fp)";
      else
    	  _ret += Integer.toString((index-argc+4)*-4 + -12) + "($fp)";
      return _ret + "\n";
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public String visit(PassArgStmt n) {
      String _ret="sw "; 
      int index =  (Integer.parseInt(n.f1.accept(this)) - 1)*4;
      _ret += n.f2.accept(this) + ", " + index + "($sp)\n";
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public String visit(CallStmt n) {
      String _ret="";
      String s = n.f1.accept(this);
      if(sexpr_type == "Label")
    	  _ret = "jal ";
      else if(sexpr_type == "Reg")
    	  _ret = "jalr ";
      else
    	  error("Incorrect arg at call");
      
      _ret += s + "\n";
      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public String visit(Exp n) {
	   return n.f0.accept(this);
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public String visit(HAllocate n) {
      String s = n.f1.accept(this);
      if(sexpr_type == "IntegerLiteral"){
    	  addPretext("li $a0, " + s);
      }
      else if(sexpr_type == "Reg"){
    	  addPretext("move $a0, " + s);
      }
      else{
    	  error("Incorrect Hallocate arg");
      }
      
      addPretext("jal _halloc");
      return "$v0 ";
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public String visit(BinOp n) {
      if(!(n.f2.f0.choice instanceof Reg))
    	  isimmediate = true;
      else
    	  isimmediate = false;
      
	  opcode  = n.f0.accept(this);
      lsrc 	  = n.f1.accept(this);
      rsrc	  = n.f2.accept(this);
      isimmediate = false;

      return "";
   }

   /**
    * f0 -> "LT"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    *       | "BITOR"
    *       | "BITAND"
    *       | "LSHIFT"
    *       | "RSHIFT"
    *       | "BITXOR"
    */
   public String visit(Operator n) {
      if(!isimmediate){
    	  switch(((NodeToken)n.f0.choice).tokenImage){
        	case "LT": 		return "slt";
        	case "PLUS":	return "add";
        	case "MINUS":	return "sub";
        	case "TIMES":	return "mul";
        	case "DIV":		return "div";
        	case "BITOR":	return "or";
        	case "BITAND":	return "and";
        	case "LSHIFT":	return "sll";
        	case "RSHIFT":	return "srl";
        	case "BITXOR":	return "xor";
        	default:		error("opcode: "+ ((NodeToken)n.f0.choice).tokenImage);
        }
      }
      else{
		  switch(((NodeToken)n.f0.choice).tokenImage){
	      	case "LT": 		return "slti";
	      	case "PLUS":	return "add";
	      	case "MINUS":	return "sub";
	      	case "TIMES":	return "mul";
	      	case "DIV":		return "div";
	      	case "BITOR":	return "ori";
	      	case "BITAND":	return "and";
	      	case "LSHIFT":	return "sll";
	      	case "RSHIFT":	return "srl";
	      	case "BITXOR":	return "xori";
	      	default:		error("opcode: "+ ((NodeToken)n.f0.choice).tokenImage);
	      }
      }
      return "";
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public String visit(SpilledArg n) {
      return n.f1.accept(this);
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public String visit(SimpleExp n) {
	   if(n.f0.choice instanceof Reg)					sexpr_type = "Reg";
	   else if(n.f0.choice instanceof IntegerLiteral)	sexpr_type = "IntegerLiteral";
	   else												sexpr_type = "Label";
		   
	   return n.f0.accept(this);
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public String visit(Reg n) {
      return "$" + ((NodeToken)n.f0.choice).tokenImage;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public String visit(IntegerLiteral n) {
      return n.f0.accept(this);
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public String visit(Label n) {
	   return n.f0.accept(this);
   }

   /**
    * f0 -> "// Number of  vars after packing ="
    * f1 -> IntegerLiteral()
    * f2 -> "; Number of Spilled vars ="
    * f3 -> IntegerLiteral()
    */
   public String visit(VariablePackingInfo n) {
      return "";
   }

}
